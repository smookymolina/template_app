/**
 * 
 * Inicializa todos los m√≥dulos y gestiona la l√≥gica principal
 */
import CONFIG from './config.js';
import Auth from './auth.js';
import Reclutas from './reclutas.js';
import UI from './ui.js';
import Calendar from './calendar.js';
import Client from './client.js';
import Timeline from './timeline.js';
import { showNotification, showError, showSuccess } from './notifications.js';

let MetricasAdmin = null;

// Estado global de la aplicaci√≥n
let appState = {
    initialized: false,
    currentSection: 'reclutas-section'
};

/**
 * ‚úÖ INICIALIZACI√ìN PRINCIPAL DE LA APLICACI√ìN
 */
document.addEventListener('DOMContentLoaded', async function() {
    try {
        console.log('üöÄ Iniciando sistema de gesti√≥n de reclutas...');
        
        // ‚úÖ 1. INICIALIZAR COMPONENTES B√ÅSICOS
        UI.loadSavedTheme();
        UI.initCommonEvents();
        UI.initNavigation();
        UI.initColorSelectors();

        // üÜï INICIALIZACI√ìN ESPEC√çFICA PARA M√âTRICAS
        const currentUser = getCurrentUser();
    
        if (currentUser?.rol === 'admin') {
        console.log('üëë Usuario administrador detectado - Preparando m√©tricas avanzadas');
        
        // Pre-cargar m√≥dulo si estamos en la p√°gina de dashboard
        if (document.getElementById('dashboard-section')) {
            // Cargar el m√≥dulo pero no inicializarlo hasta que sea necesario
            loadMetricasAdminModule();
        }
        } else if (currentUser?.rol === 'asesor') {
        console.log('üë• Usuario asesor detectado - Configurando vista simplificada');
        
        // Ocultar elementos admin inmediatamente
        hideAdminFeatures();
        }

        // üé® AGREGAR ESTILOS B√ÅSICOS PARA GR√ÅFICOS SIMPLES
        const basicChartStyles = `
        <style>
        .basic-chart {
            display: flex;
            height: 100px;
            border-radius: 8px;
            overflow: hidden;
            margin: 1rem 0;
        }
        .chart-segment {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 0.8rem;
            text-align: center;
            padding: 0.5rem;
            transition: all 0.3s ease;
        }
        .chart-segment:hover {
            transform: scale(1.05);
            z-index: 1;
        }
        .chart-segment.verde { background: #10B981; }
        .chart-segment.amarillo { background: #F59E0B; }
        .chart-segment.rojo { background: #EF4444; }
        </style>
        `;
          document.head.insertAdjacentHTML('beforeend', basicChartStyles);
        
        // ‚úÖ 2. INICIALIZAR SISTEMA DE TRACKING P√öBLICO (CR√çTICO)
        console.log('üìã Inicializando sistema de tracking por folio...');
        Client.init();
        Timeline.init();
        initPublicTracking();
        
        // ‚úÖ 3. VERIFICAR AUTENTICACI√ìN PARA PANEL ADMIN
        try {
            const user = await Auth.checkAuth();
            if (user) {
                console.log('üë§ Usuario autenticado, mostrando dashboard...');
                loginSuccess(user);
            } else {
                console.log('üîê No hay sesi√≥n activa, mostrando pantalla p√∫blica...');
                showLoginScreen();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error verificando auth, mostrando pantalla p√∫blica:', error);
            showLoginScreen();
        }
        
        // ‚úÖ 4. CONFIGURAR EVENTOS DE FORMULARIOS
        setupFormEvents();
        
        console.log('‚úÖ Sistema inicializado correctamente');
        
    } catch (error) {
        console.error('‚ùå Error cr√≠tico en la inicializaci√≥n:', error);
        showError('Error al cargar el sistema. Por favor, recarga la p√°gina.');
    }
});

/**
 * ‚úÖ NUEVA FUNCI√ìN: Inicializar Auth y UI en orden correcto
 * AGREGAR a main.js
 */
async function initializeAuthAndUI() {
    try {
        console.log('‚öôÔ∏è Inicializando Auth y UI...');
        
        // 1. Verificar que Auth est√© disponible
        if (typeof Auth === 'undefined') {
            console.warn('‚ö†Ô∏è M√≥dulo Auth no disponible, usando modo sin autenticaci√≥n');
            
            // Usar configuraci√≥n por defecto
            UI.resetUIToDefault();
            showLoginScreen();
            return;
        }
        
        // 2. Verificar autenticaci√≥n existente
        console.log('üîç Verificando sesi√≥n existente...');
        let user = null;
        
        try {
            user = await Auth.checkAuth();
        } catch (error) {
            console.warn('‚ö†Ô∏è Error verificando auth:', error);
            user = null;
        }
        
        // 3. Configurar UI seg√∫n estado de autenticaci√≥n
        if (user) {
            console.log('üë§ Usuario autenticado encontrado, configurando dashboard...');
            
            // ‚úÖ AHORA S√ç: Inicializar UI con Auth disponible
            UI.initializeWithAuth();
            
            // Mostrar dashboard
            loginSuccess(user);
        } else {
            console.log('üîê No hay sesi√≥n activa, mostrando pantalla de login...');
            
            // ‚úÖ AHORA S√ç: Cargar tema por defecto
            UI.resetUIToDefault();
            
            // Mostrar login
            showLoginScreen();
        }
        
        // 4. Inicializar eventos que dependen de Auth
        if (typeof UI.initAuthDependentEvents === 'function') {
            UI.initAuthDependentEvents();
        }
        
        console.log('‚úÖ Auth y UI inicializados correctamente');
        
    } catch (error) {
        console.error('‚ùå Error al inicializar Auth y UI:', error);
        
        // Fallback: mostrar login sin auth
        UI.resetUIToDefault();
        showLoginScreen();
    }
}

/**
 * ‚úÖ INICIALIZACI√ìN DEL SISTEMA DE TRACKING P√öBLICO
 */
function initPublicTracking() {
    console.log('üéØ Configurando tracking p√∫blico...');
    
    // ‚úÖ Manejo de pesta√±as (Admin vs Seguimiento)
    const adminLoginTab = document.getElementById('admin-login-tab');
    const trackingTab = document.getElementById('tracking-tab');
    const loginForm = document.getElementById('login-form');
    const trackingWrapper = document.getElementById('tracking-wrapper');

    if (adminLoginTab && trackingTab && loginForm && trackingWrapper) {
        console.log('üìë Configurando pesta√±as...');
        
        adminLoginTab.addEventListener('click', function() {
            switchToAdminTab();
        });
        
        trackingTab.addEventListener('click', function() {
            switchToTrackingTab();
        });
    }

    // ‚úÖ Eventos de tracking en la pesta√±a principal
    const trackingButton = document.getElementById('tracking-button');
    const folioInput = document.getElementById('folio-input');
    
    if (trackingButton && folioInput) {
        console.log('üîç Configurando bot√≥n de consulta principal...');
        
        trackingButton.addEventListener('click', function() {
            handleTrackingRequest(folioInput.value);
        });

        folioInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleTrackingRequest(this.value);
            }
        });
    }

    // ‚úÖ Link de recuperaci√≥n en pesta√±a
    const tabRecuperarLink = document.getElementById('tab-recuperar-folio-link');
    if (tabRecuperarLink) {
        tabRecuperarLink.addEventListener('click', function(e) {
            e.preventDefault();
            openRecoveryModal();
        });
    }

    // ‚úÖ Modal de cliente
    initClientModal();
    
    console.log('‚úÖ Tracking p√∫blico configurado');
}

/**
 * ‚úÖ CAMBIAR A PESTA√ëA DE SEGUIMIENTO
 */
function switchToTrackingTab() {
    const adminTab = document.getElementById('admin-login-tab');
    const trackingTab = document.getElementById('tracking-tab');
    const loginForm = document.getElementById('login-form');
    const trackingWrapper = document.getElementById('tracking-wrapper');
    
    // Activar pesta√±a tracking
    trackingTab?.classList.add('active');
    adminTab?.classList.remove('active');
    trackingWrapper?.classList.add('active');
    loginForm?.classList.remove('active');
    
    // Limpiar y enfocar input
    const folioInput = document.getElementById('folio-input');
    if (folioInput) {
        folioInput.value = '';
        setTimeout(() => folioInput.focus(), 100);
    }
    
    console.log('üìã Cambiado a pesta√±a de seguimiento');
}

/**
 * ‚úÖ MANEJAR SOLICITUD DE TRACKING
 */
function handleTrackingRequest(folioValue) {
    if (!folioValue || !folioValue.trim()) {
        showError('Por favor, ingresa un n√∫mero de folio');
        return;
    }
    
    console.log(`üîç Procesando solicitud de tracking para folio: ${folioValue}`);
    
    // Usar el m√≥dulo Client para procesar
    if (Client && typeof Client.processFolioValue === 'function') {
        Client.processFolioValue(folioValue.trim());
    } else {
        console.error('‚ùå M√≥dulo Client no disponible');
        showError('Error interno: m√≥dulo de tracking no disponible');
    }
}

/**
 * ‚úÖ ABRIR MODAL DE RECUPERACI√ìN
 */
function openRecoveryModal() {
    const modal = document.getElementById('cliente-modal');
    if (modal) {
        modal.style.display = 'block';
        // Esperar a que el modal se muestre y luego mostrar formulario de recuperaci√≥n
        setTimeout(() => {
            if (Client && typeof Client.showRecuperarFolioForm === 'function') {
                Client.showRecuperarFolioForm();
            }
        }, 150);
    }
}

/**
 * ‚úÖ INICIALIZAR MODAL DE CLIENTE
 */
function initClientModal() {
    const modal = document.getElementById('cliente-modal');
    const consultarBtn = document.getElementById('consultar-folio-btn');
    const folioModalInput = document.getElementById('folio');
    const recuperarLink = document.getElementById('recuperar-folio-link');
    const closeButtons = document.querySelectorAll('.close-modal, .close-modal-btn');

    if (!modal) return;

    console.log('üñ•Ô∏è Configurando modal de cliente...');

    // Bot√≥n consultar en modal
    if (consultarBtn && folioModalInput) {
        consultarBtn.addEventListener('click', function() {
            if (Client && typeof Client.processFolio === 'function') {
                Client.processFolio();
            }
        });
    }

    // Enter en input del modal
    if (folioModalInput) {
        folioModalInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                if (Client && typeof Client.processFolio === 'function') {
                    Client.processFolio();
                }
            }
        });
    }

    // Link de recuperaci√≥n en modal
    if (recuperarLink) {
        recuperarLink.addEventListener('click', function(e) {
            e.preventDefault();
            if (Client && typeof Client.showRecuperarFolioForm === 'function') {
                Client.showRecuperarFolioForm();
            }
        });
    }

    // Cerrar modal
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            closeClientModal();
        });
    });

    // Cerrar al hacer clic fuera
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            closeClientModal();
        }
    });
}

/**
 * ‚úÖ CERRAR MODAL DE CLIENTE
 */
function closeClientModal() {
    const modal = document.getElementById('cliente-modal');
    if (modal) {
        modal.style.display = 'none';
        // Resetear formulario
        if (Client && typeof Client.resetFolioForm === 'function') {
            Client.resetFolioForm();
        }
    }
}

/**
 * ‚úÖ CONFIGURAR EVENTOS DE FORMULARIOS ADMIN
 */
function setupFormEvents() {
    // Login form
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            login();
        });
    }
    
    // Login button
    const loginButton = document.getElementById('login-button');
    if (loginButton) {
        loginButton.addEventListener('click', login);
    }
    
    // Enter en campos de login
    const emailField = document.getElementById('email');
    const passwordField = document.getElementById('password');
    
    if (emailField) {
        emailField.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                login();
            }
        });
    }
    
    if (passwordField) {
        passwordField.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                login();
            }
        });
    }
    
    // Logout button
    const logoutButton = document.getElementById('logout-button');
    if (logoutButton) {
        logoutButton.addEventListener('click', logout);
    }
    
    // Cambio de contrase√±a
    const changePasswordBtn = document.getElementById('change-password-btn');
    if (changePasswordBtn) {
        changePasswordBtn.addEventListener('click', changePassword);
    }
    
    // Actualizar perfil
    const updateProfileBtn = document.getElementById('update-profile-btn');
    if (updateProfileBtn) {
        updateProfileBtn.addEventListener('click', updateProfile);
    }
    
    // Manejo de foto de perfil
    const profileUpload = document.getElementById('profile-upload');
    if (profileUpload) {
        profileUpload.addEventListener('change', handleProfileImageChange);
    }
}

/**
 * ‚úÖ FUNCI√ìN DE LOGIN
 */
async function login() {
    const email = document.getElementById('email')?.value;
    const password = document.getElementById('password')?.value;

    if (!email || !password) {
        showError('Completa los campos de usuario y contrase√±a');
        return;
    }

    const loginButton = document.getElementById('login-button');
    if (loginButton) {
        loginButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Verificando...';
        loginButton.disabled = true;
    }

    try {
        console.log('üîê Iniciando proceso de login...');
        
        // ‚úÖ NUEVO: Auth.login ahora incluye limpieza previa
        const user = await Auth.login(email, password);
        
        console.log('‚úÖ Login exitoso, datos de usuario:', user);
        loginSuccess(user);
        
    } catch (error) {
        console.error('‚ùå Error de login:', error);
        showError('Usuario o contrase√±a incorrectos');
    } finally {
        if (loginButton) {
            loginButton.innerHTML = '<i class="fas fa-sign-in-alt"></i> Iniciar Sesi√≥n';
            loginButton.disabled = false;
        }
    }
}

/**
 * ‚úÖ ACCIONES TRAS LOGIN EXITOSO
 */
async function loginSuccess(usuario) {
    try {
        console.log('üéâ Procesando login exitoso para:', usuario.email);
        
        // ‚úÖ NUEVO: Validar que el usuario tenga datos completos
        if (!usuario || !usuario.email) {
            throw new Error('Datos de usuario incompletos');
        }
        
        // Actualizar usuario actual con validaci√≥n
        Auth.updateUserData(usuario);
        
        // ‚úÖ NUEVO: Ahora que Auth est√° disponible, inicializar UI con usuario
        if (typeof UI.initializeForUser === 'function') {
            UI.initializeForUser(usuario);
        } else {
            // Fallback si la funci√≥n no existe
            UI.loadSavedTheme();
        }
        
        // ‚úÖ NUEVO: Validar limpieza previa antes de mostrar dashboard
        const hasOldElements = document.querySelectorAll('.admin-welcome, .asesor-welcome').length > 0;
        if (hasOldElements) {
            console.warn('‚ö†Ô∏è Detectados elementos de rol anterior, limpiando...');
            if (typeof Auth.cleanupDynamicElements === 'function') {
                Auth.cleanupDynamicElements();
            }
        }
        
        // Cambiar de pantalla con validaci√≥n
        const loginSection = document.getElementById('login-section');
        const dashboardSection = document.getElementById('dashboard-section');
        
        if (!loginSection || !dashboardSection) {
            throw new Error('Elementos de UI no encontrados');
        }
        
        loginSection.style.display = 'none';
        dashboardSection.style.display = 'block';
        
        // ‚úÖ NUEVO: Configurar UI seg√∫n rol con verificaci√≥n
        const userRole = usuario.rol || 'asesor';
        console.log(`üé≠ Configurando dashboard para rol: ${userRole}`);
        
        // Limpiar clases de rol anteriores
        document.body.classList.remove('admin-view', 'asesor-view');
        
        // Configurar nueva clase de rol
        configureDashboardForRole(userRole);
        
        // Actualizar informaci√≥n de usuario con validaci√≥n
        updateUserInfo(usuario);
        
        // ‚úÖ NUEVO: Inicializar m√≥dulos solo si no est√°n inicializados
        if (!appState.initialized) {
            console.log('üì¶ Inicializando m√≥dulos del dashboard...');
            
            try {
                if (typeof Reclutas !== 'undefined' && Reclutas.init) {
                    Reclutas.userRole = userRole;
                    await Reclutas.init();
                    await Reclutas.loadAndDisplayReclutas();
                }
            } catch (e) {
                console.error('‚ùå Error al inicializar reclutas:', e);
                showError('Error al cargar reclutas: ' + e.message);
            }
            
            try {
                if (typeof Calendar !== 'undefined' && Calendar.init) {
                    await Calendar.init();
                }
            } catch (e) {
                console.error('‚ùå Error al inicializar calendario:', e);
            }
            
            try {
                await loadEstadisticas();
            } catch (e) {
                console.error('‚ùå Error al cargar estad√≠sticas:', e);
            }
            
            appState.initialized = true;
        } else {
            // Recargar datos si ya est√° inicializado
            try {
                if (typeof Reclutas !== 'undefined' && Reclutas.loadAndDisplayReclutas) {
                    Reclutas.userRole = userRole;
                    await Reclutas.loadAndDisplayReclutas();
                }
            } catch (e) {
                console.error('‚ùå Error al recargar reclutas:', e);
            }
        }
        
        // ‚úÖ NUEVO: Mensaje de bienvenida mejorado
        const welcomeMessage = getWelcomeMessage(usuario);
        showSuccess(welcomeMessage);
        
        console.log('‚úÖ Dashboard configurado correctamente para:', userRole);
        
    } catch (error) {
        console.error('‚ùå Error en loginSuccess:', error);
        showError('Error al cargar el dashboard: ' + error.message);
        
        // ‚úÖ NUEVO: En caso de error, limpiar y volver a login
        if (typeof Auth.clearUserState === 'function') {
            Auth.clearUserState();
        }
        showLoginScreen(true);
    }
}

/**
 * ‚úÖ RESTO DE FUNCIONES (sin cambios, solo cleanup)
 */

function updateUserInfo(usuario) {
    if (!usuario) return;

    const gerenteName = document.getElementById('gerente-name');
    const dropdownUserName = document.getElementById('dropdown-user-name');
    
    if (gerenteName) gerenteName.textContent = usuario.nombre || usuario.email;
    if (dropdownUserName) dropdownUserName.textContent = usuario.nombre || usuario.email;
    
    configureDashboardForRole(usuario.rol);
    
    const profilePic = document.getElementById('dashboard-profile-pic');
    if (profilePic) {
        profilePic.src = usuario.foto_url || '/api/placeholder/100/100';
    }
    
    const userName = document.getElementById('user-name');
    const userEmail = document.getElementById('user-email');
    const userPhone = document.getElementById('user-phone');
    
    if (userName) userName.value = usuario.nombre || '';
    if (userEmail) userEmail.value = usuario.email || '';
    if (userPhone) userPhone.value = usuario.telefono || '';
}

function getWelcomeMessage(usuario) {
    if (!usuario) return '¬°Bienvenido al sistema!';
    
    const nombre = usuario.nombre || usuario.email;
    const rol = usuario.rol || 'usuario';
    
    switch (rol) {
        case 'admin':
            return `¬°Bienvenido ${nombre}! Tienes acceso completo como Administrador.`;
        case 'asesor':
            return `¬°Bienvenido ${nombre}! Gestiona tus reclutas asignados como Asesor.`;
        case 'gerente':
            return `¬°Bienvenido ${nombre}! Supervisa el proceso de reclutamiento como Gerente.`;
        default:
            return `¬°Bienvenido ${nombre}!`;
    }
}

function configureDashboardForRole(rol) {
    const dashboardNav = document.querySelector('.dashboard-nav ul');
    const profileRole = document.querySelector('.profile-role');
    
    if (!dashboardNav) return;
    
    // Limpiar clases existentes
    document.body.classList.remove('admin-view', 'asesor-view');
    document.body.classList.add(rol === 'admin' ? 'admin-view' : 'asesor-view');
    
    // Actualizar rol en perfil
    if (profileRole) {
        const roleNames = {
            'admin': 'Administrador',
            'asesor': 'Asesor de Reclutamiento',
            'gerente': 'Gerente de Reclutamiento'
        };
        profileRole.textContent = roleNames[rol] || 'Usuario';
    }
    
    // üÜï CONFIGURAR NAVEGACI√ìN SEG√öN ROL
    if (rol === 'admin') {
        // ‚úÖ NAVEGACI√ìN PARA ADMINISTRADORES (con m√©tricas avanzadas)
        dashboardNav.innerHTML = `
            <li class="active"><a href="#" data-section="reclutas-section"><i class="fas fa-users"></i> Gesti√≥n de Reclutas</a></li>
            <li><a href="#" data-section="calendario-section"><i class="fas fa-calendar-alt"></i> Calendario</a></li>
            <li><a href="#" data-section="estadisticas-section"><i class="fas fa-chart-bar"></i> M√©tricas Avanzadas</a></li>
            <li><a href="#" data-section="configuracion-section"><i class="fas fa-cog"></i> Configuraci√≥n</a></li>
        `;
        
        // üîß CARGAR M√ìDULO DE M√âTRICAS ADMINISTRATIVAS
        loadMetricasAdminModule();
        
    } else {
        // üë• NAVEGACI√ìN PARA ASESORES (simplificada)
        dashboardNav.innerHTML = `
            <li class="active"><a href="#" data-section="reclutas-section"><i class="fas fa-users"></i> Mis Reclutas</a></li>
            <li><a href="#" data-section="calendario-section"><i class="fas fa-calendar-alt"></i> Mis Entrevistas</a></li>
            <li><a href="#" data-section="estadisticas-section"><i class="fas fa-chart-bar"></i> Mis Estad√≠sticas</a></li>
            <li><a href="#" data-section="configuracion-section"><i class="fas fa-cog"></i> Mi Perfil</a></li>
        `;
        
        // üö´ OCULTAR FUNCIONALIDADES ADMIN
        hideAdminFeatures();
    }
    
    // Re-inicializar navegaci√≥n
    UI.initNavigation();
    
    // Configurar UI espec√≠fica para reclutas
    if (typeof Reclutas !== 'undefined' && Reclutas.configureUIForRole) {
        Reclutas.userRole = rol;
        setTimeout(() => Reclutas.configureUIForRole(), 100);
    }
}

// Cargar m√≥dulo de m√©tricas administrativas
async function loadMetricasAdminModule() {
    try {
        // Verificar si el m√≥dulo ya est√° cargado
        if (window.MetricasAdmin) {
            console.log('üìä M√≥dulo MetricasAdmin ya est√° cargado');
            return;
        }
        
        // Cargar din√°micamente el script de m√©tricas
        const script = document.createElement('script');
        script.src = '/static/js/metricas-admin.js';
        script.onload = () => {
            console.log('‚úÖ M√≥dulo MetricasAdmin cargado exitosamente');
            
            // Inicializar m√≥dulo cuando est√© cargado
            if (window.MetricasAdmin) {
                MetricasAdmin = window.MetricasAdmin;
                
                // Esperar a que el DOM est√© listo antes de inicializar
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', () => {
                        initializeMetricasAdmin();
                    });
                } else {
                    initializeMetricasAdmin();
                }
            }
        };
        script.onerror = () => {
            console.error('‚ùå Error al cargar m√≥dulo MetricasAdmin');
            Notifications.show('Error al cargar m√©tricas avanzadas', 'error');
        };
        
        document.head.appendChild(script);
        
        // Tambi√©n cargar estilos CSS espec√≠ficos
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = '/static/css/metricas-admin.css';
        document.head.appendChild(cssLink);
        
    } catch (error) {
        console.error('‚ùå Error al cargar m√≥dulo de m√©tricas:', error);
    }
}

// Inicializar m√©tricas administrativas
function initializeMetricasAdmin() {
    // Solo inicializar si estamos en la secci√≥n de estad√≠sticas y el usuario es admin
    const estadisticasSection = document.getElementById('estadisticas-section');
    const currentUser = getCurrentUser();
    
    if (estadisticasSection && currentUser?.rol === 'admin' && MetricasAdmin) {
        try {
            console.log('üéØ Inicializando m√©tricas administrativas...');
            MetricasAdmin.init();
            
            // Agregar contenedor espec√≠fico para m√©tricas admin si no existe
            let metricasContainer = document.getElementById('metricas-admin-container');
            if (!metricasContainer) {
                metricasContainer = document.createElement('div');
                metricasContainer.id = 'metricas-admin-container';
                metricasContainer.className = 'admin-only';
                estadisticasSection.appendChild(metricasContainer);
            }
            
        } catch (error) {
            console.error('‚ùå Error al inicializar m√©tricas administrativas:', error);
        }
    }
}

// Ocultar funcionalidades admin para asesores
function hideAdminFeatures() {
    // Ocultar todos los elementos con clase admin-only
    const adminElements = document.querySelectorAll('.admin-only');
    adminElements.forEach(element => {
        element.style.display = 'none';
    });
    
    // Mostrar mensaje espec√≠fico para asesores si existe
    const asesorMessage = document.querySelector('.asesor-only-message');
    if (asesorMessage) {
        asesorMessage.style.display = 'block';
    }
    
    console.log('üîí Funcionalidades admin ocultas para usuario asesor');
}


async function loadEstadisticas() {
    try {
        const currentUser = getCurrentUser();
        
        if (currentUser?.rol === 'admin') {
            // üëë ADMINISTRADORES: Cargar m√©tricas avanzadas
            console.log('üìä Cargando m√©tricas administrativas avanzadas...');
            
            if (MetricasAdmin) {
                await MetricasAdmin.loadMetricas(true);
            } else {
                // Si el m√≥dulo no est√° cargado, cargar estad√≠sticas b√°sicas primero
                await loadEstadisticasBasicas();
                
                // Intentar cargar m√≥dulo de m√©tricas
                await loadMetricasAdminModule();
            }
        } else {
            // üë• ASESORES: Cargar solo estad√≠sticas b√°sicas de sus reclutas
            console.log('üìä Cargando estad√≠sticas b√°sicas para asesor...');
            await loadEstadisticasBasicas();
        }
        
    } catch (error) {
        console.error('‚ùå Error al cargar estad√≠sticas:', error);
        Notifications.show('Error al cargar estad√≠sticas: ' + error.message, 'error');
    }
}

// üÜï NUEVA FUNCI√ìN: Cargar estad√≠sticas b√°sicas (para asesores)
async function loadEstadisticasBasicas() {
    try {
        const response = await fetch(`${CONFIG.API_URL}/estadisticas`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('auth_token')}`
            }
        });
        
        if (!response.ok) throw new Error(`Error ${response.status}`);
        
        const data = await response.json();
        if (data.success) {
            updateEstadisticasBasicasUI(data);
        }
    } catch (error) {
        console.error('Error al cargar estad√≠sticas b√°sicas:', error);
        throw error;
    }
}

// üÜï NUEVA FUNCI√ìN: Actualizar UI con estad√≠sticas b√°sicas
function updateEstadisticasBasicasUI(data) {
    // Actualizar contadores b√°sicos
    const statElements = {
        'total-reclutas': data.total_reclutas || 0,
        'reclutas-activos': data.reclutas_activos || 0,
        'en-proceso': data.en_proceso || 0,
        'entrevistas-pendientes': data.entrevistas_pendientes || 0
    };
    
    Object.entries(statElements).forEach(([id, value]) => {
        const element = document.querySelector(`[data-stat="${id}"]`) || 
                       document.querySelector(`#${id}`) ||
                       document.querySelector(`.stat-number`);
        if (element) {
            element.textContent = value;
        }
    });
    
    // Actualizar gr√°ficos b√°sicos si existen
    if (data.distribucion_estados) {
        updateBasicCharts(data.distribucion_estados);
    }
    
    console.log('‚úÖ Estad√≠sticas b√°sicas actualizadas');
}

// üÜï NUEVA FUNCI√ìN: Actualizar gr√°ficos b√°sicos
function updateBasicCharts(distribucion) {
    const chartContainer = document.querySelector('.chart-placeholder');
    if (chartContainer && distribucion) {
        const total = distribucion.activos + distribucion.proceso + distribucion.rechazados;
        
        if (total > 0) {
            const porcentajes = {
                activos: (distribucion.activos / total * 100).toFixed(1),
                proceso: (distribucion.proceso / total * 100).toFixed(1),
                rechazados: (distribucion.rechazados / total * 100).toFixed(1)
            };
            
            chartContainer.innerHTML = `
                <div class="basic-chart">
                    <div class="chart-segment verde" style="flex: ${porcentajes.activos}">
                        ${porcentajes.activos}%<br>Activos
                    </div>
                    <div class="chart-segment amarillo" style="flex: ${porcentajes.proceso}">
                        ${porcentajes.proceso}%<br>Proceso
                    </div>
                    <div class="chart-segment rojo" style="flex: ${porcentajes.rechazados}">
                        ${porcentajes.rechazados}%<br>Rechazados
                    </div>
                </div>
            `;
        }
    }
}

const originalShowSection = showSection; // Guardar referencia original

function showSection(sectionId) {
    // Llamar a la funci√≥n original
    if (originalShowSection) {
        originalShowSection(sectionId);
    }
    
    // üÜï L√ìGICA ESPEC√çFICA PARA ESTAD√çSTICAS
    if (sectionId === 'estadisticas-section') {
        const currentUser = getCurrentUser();
        
        // Cargar estad√≠sticas apropiadas seg√∫n el rol
        setTimeout(() => {
            loadEstadisticas();
        }, 100);
        
        // Si es admin y el m√≥dulo est√° cargado, inicializar
        if (currentUser?.rol === 'admin' && MetricasAdmin) {
            setTimeout(() => {
                initializeMetricasAdmin();
            }, 200);
        }
    }
}

// Obtener usuario actual
function getCurrentUser() {
    try {
        const userDataStr = localStorage.getItem('user_data');
        return userDataStr ? JSON.parse(userDataStr) : null;
    } catch (error) {
        console.error('Error al obtener datos del usuario:', error);
        return null;
    }
}

function updateEstadisticasUI(data) {
    const stats = {
        totalReclutas: document.querySelector('.stat-card:nth-child(1) .stat-number'),
        reclutasActivos: document.querySelector('.stat-card:nth-child(2) .stat-number'),
        enProceso: document.querySelector('.stat-card:nth-child(3) .stat-number'),
        entrevistasPendientes: document.querySelector('.stat-card:nth-child(4) .stat-number')
    };
    
    if (stats.totalReclutas) stats.totalReclutas.textContent = data.reclutas.total;
    if (stats.reclutasActivos) stats.reclutasActivos.textContent = data.reclutas.activos;
    if (stats.enProceso) stats.enProceso.textContent = data.reclutas.en_proceso;
    if (stats.entrevistasPendientes) stats.entrevistasPendientes.textContent = data.entrevistas.pendientes;
}

/**
 * ‚úÖ FUNCI√ìN LOGOUT CORREGIDA - Reemplazar funci√≥n existente
 */
async function logout() {
    try {
        console.log('üö™ Iniciando logout desde main.js...');
        
        // ‚úÖ NUEVO: Auth.logout ahora incluye limpieza completa
        await Auth.logout();
        
        // ‚úÖ NUEVO: Limpieza adicional del DOM espec√≠fica de main.js
        cleanupMainDOMElements();
        
        // ‚úÖ NUEVO: Mostrar pantalla de login asegurando estado limpio
        showLoginScreen(true); // Par√°metro true para forzar limpieza
        
        // ‚úÖ NUEVO: Limpiar campos de formulario
        const emailField = document.getElementById('email');
        const passwordField = document.getElementById('password');
        
        if (emailField) emailField.value = '';
        if (passwordField) passwordField.value = '';
        
        // ‚úÖ NUEVO: Resetear a pesta√±a de admin por defecto
        switchToAdminTab();
        
        showSuccess('Sesi√≥n cerrada correctamente');
        console.log('‚úÖ Logout completado exitosamente');
        
    } catch (error) {
        console.error('‚ùå Error al cerrar sesi√≥n:', error);
        showError('Error al cerrar sesi√≥n');
        
        // ‚úÖ NUEVO: A√∫n as√≠ forzar limpieza local
        forceCleanupAndShowLogin();
    }
}

/**
 * ‚úÖ NUEVA FUNCI√ìN: Limpieza espec√≠fica del DOM de main.js
 */
function cleanupMainDOMElements() {
    console.log('üßΩ Limpiando elementos espec√≠ficos de main.js...');
    
    // Limpiar estado global de la aplicaci√≥n
    if (window.appState) {
        window.appState.initialized = false;
        window.appState.currentSection = 'reclutas-section';
    }
    
    // Remover eventos espec√≠ficos que puedan estar atados
    const dynamicButtons = document.querySelectorAll('.dynamic-button, .role-button');
    dynamicButtons.forEach(button => button.remove());
    
    // Limpiar cach√© de m√≥dulos si existe
    if (window.Reclutas && typeof window.Reclutas.cleanup === 'function') {
        window.Reclutas.cleanup();
    }
    
    if (window.Calendar && typeof window.Calendar.cleanup === 'function') {
        window.Calendar.cleanup();
    }
    
    console.log('‚úÖ Elementos espec√≠ficos de main.js limpiados');
}

/**
 * ‚úÖ NUEVA FUNCI√ìN: Forzar limpieza y mostrar login en caso de error
 */
function forceCleanupAndShowLogin() {
    console.log('üîß Forzando limpieza de emergencia...');
    
    // Forzar limpieza b√°sica
    Auth.currentUser = null;
    
    // Limpiar localStorage b√°sico
    try {
        localStorage.removeItem(CONFIG.STORAGE_KEYS.THEME);
        localStorage.removeItem(CONFIG.STORAGE_KEYS.PRIMARY_COLOR);
    } catch (e) {
        console.warn('‚ö†Ô∏è Error en limpieza de emergencia:', e);
    }
    
    // Mostrar pantalla de login
    showLoginScreen(true);
    
    console.log('‚úÖ Limpieza de emergencia completada');
}

function showLoginScreen(forceClean = false) {
    console.log('üîê Mostrando pantalla de login...');
    
    // ‚úÖ NUEVO: Limpieza opcional forzada
    if (forceClean) {
        console.log('üßπ Realizando limpieza forzada antes de mostrar login...');
        
        // Limpiar elementos din√°micos
        const dynamicElements = document.querySelectorAll('.admin-welcome, .asesor-welcome, .role-specific-element');
        dynamicElements.forEach(el => el.remove());
        
        // Remover clases de rol
        document.body.classList.remove('admin-view', 'asesor-view');
        
        // Resetear UI b√°sica
        if (typeof UI !== 'undefined' && UI.resetUIToDefault) {
            UI.resetUIToDefault();
        }
    }
    
    const loginSection = document.getElementById('login-section');
    const dashboardSection = document.getElementById('dashboard-section');
    
    if (loginSection) {
        loginSection.style.display = 'block';
    }
    if (dashboardSection) {
        dashboardSection.style.display = 'none';
    }
    
    // ‚úÖ NUEVO: Asegurar que estemos en la pesta√±a de admin por defecto
    switchToAdminTab();
    
    console.log('‚úÖ Pantalla de login mostrada');
}

/**
 * ‚úÖ NUEVA FUNCI√ìN: Cambiar a pesta√±a de administrador
 */
function switchToAdminTab() {
    const adminTab = document.getElementById('admin-login-tab');
    const trackingTab = document.getElementById('tracking-tab');
    const loginForm = document.getElementById('login-form');
    const trackingWrapper = document.getElementById('tracking-wrapper');
    
    if (adminTab && trackingTab && loginForm && trackingWrapper) {
        adminTab.classList.add('active');
        trackingTab.classList.remove('active');
        loginForm.classList.add('active');
        trackingWrapper.classList.remove('active');
        
        console.log('üìë Cambiado a pesta√±a de administrador');
    }
}

async function changePassword() {
    const currentPassword = document.getElementById('current-password')?.value;
    const newPassword = document.getElementById('new-password')?.value;
    const confirmPassword = document.getElementById('confirm-password')?.value;
    
    if (!currentPassword || !newPassword || !confirmPassword) {
        showError('Por favor, completa todos los campos');
        return;
    }
    
    if (newPassword !== confirmPassword) {
        showError('Las contrase√±as nuevas no coinciden');
        return;
    }
    
    const button = document.getElementById('change-password-btn');
    if (button) {
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cambiando...';
        button.disabled = true;
    }
    
    try {
        await Auth.changePassword(currentPassword, newPassword);
        
        document.getElementById('current-password').value = '';
        document.getElementById('new-password').value = '';
        document.getElementById('confirm-password').value = '';
        
        showSuccess('Contrase√±a cambiada correctamente');
    } catch (error) {
        console.error('Error al cambiar contrase√±a:', error);
        showError('Error al cambiar la contrase√±a: ' + error.message);
    } finally {
        if (button) {
            button.innerHTML = '<i class="fas fa-key"></i> Cambiar Contrase√±a';
            button.disabled = false;
        }
    }
}

async function updateProfile() {
    const nombre = document.getElementById('user-name')?.value;
    const telefono = document.getElementById('user-phone')?.value;
    
    if (!nombre) {
        showError('El nombre es requerido');
        return;
    }
    
    const button = document.getElementById('update-profile-btn');
    if (button) {
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
        button.disabled = true;
    }
    
    try {
        let data;
        if (window.profileImage) {
            data = new FormData();
            data.append('nombre', nombre);
            if (telefono) data.append('telefono', telefono);
            data.append('foto', window.profileImage);
        } else {
            data = { nombre, telefono };
        }
        
        const response = await fetch(`${CONFIG.API_URL}/perfil`, {
            method: 'PUT',
            body: data instanceof FormData ? data : JSON.stringify(data),
            headers: data instanceof FormData ? undefined : {
                'Content-Type': 'application/json'
            }
        });
        
        if (!response.ok) throw new Error(`Error ${response.status}`);
        
        const responseData = await response.json();
        if (responseData.success) {
            Auth.currentUser = responseData.usuario;
            updateUserInfo(responseData.usuario);
            window.profileImage = null;
            showSuccess('Perfil actualizado correctamente');
        } else {
            throw new Error(responseData.message || 'Error al actualizar perfil');
        }
    } catch (error) {
        console.error('Error al actualizar perfil:', error);
        showError('Error al actualizar perfil: ' + error.message);
    } finally {
        if (button) {
            button.innerHTML = '<i class="fas fa-save"></i> Guardar Cambios';
            button.disabled = false;
        }
    }
}

function handleProfileImageChange(event) {
    if (!event?.target?.files?.[0]) return;
    
    const file = event.target.files[0];
    const profilePic = document.getElementById('dashboard-profile-pic');
    
    if (!profilePic) return;
    
    if (file.size > CONFIG.MAX_UPLOAD_SIZE) {
        showError(`La imagen es demasiado grande. M√°ximo ${CONFIG.MAX_UPLOAD_SIZE / (1024 * 1024)}MB.`);
        event.target.value = '';
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        if (e?.target?.result) {
            profilePic.src = e.target.result;
            window.profileImage = file;
            showNotification('Foto actualizada. Guarda los cambios.', 'info');
        }
    };
    
    reader.readAsDataURL(file);
}

// ‚úÖ EXPONER FUNCIONES GLOBALMENTE PARA COMPATIBILIDAD
window.login = login;
window.Reclutas = Reclutas;
window.logout = logout;
window.loginSuccess = loginSuccess;
window.Client = Client;
window.Timeline = Timeline;
window.showNotification = showNotification;
window.showError = showError;
window.showSuccess = showSuccess;

// ‚úÖ FUNCIONES GLOBALES PARA RECLUTAS (COMPATIBILIDAD)
window.openAddReclutaModal = function() {
    if (typeof Reclutas !== 'undefined' && Reclutas.openAddReclutaModal) {
        Reclutas.openAddReclutaModal();
    } else {
        const modal = document.getElementById('add-recluta-modal');
        if (modal) modal.style.display = 'block';
    }
};

window.viewRecluta = function(id) {
    if (typeof Reclutas !== 'undefined' && Reclutas.viewRecluta) {
        Reclutas.viewRecluta(id);
    }
};

window.editRecluta = function(id) {
    if (typeof Reclutas !== 'undefined' && Reclutas.editRecluta) {
        Reclutas.editRecluta(id);
    }
};

window.deleteRecluta = function(id) {
    if (typeof Reclutas !== 'undefined' && Reclutas.confirmDeleteRecluta) {
        Reclutas.confirmDeleteRecluta(id);
    }
};

console.log('‚úÖ main.js cargado - Sistema de folio restaurado');

/**
 * ‚úÖ FUNCI√ìN DE VALIDACI√ìN - Agregar al final de main.js
 * Para verificar que la soluci√≥n funciona correctamente
 */
window.validateCacheStateFix = function() {
    console.log('üß™ === INICIANDO VALIDACI√ìN DEL FIX CACHE/ESTADO ===');
    
    const results = {
        authFunctions: false,
        uiFunctions: false,
        permissionsFunctions: false,
        domCleanup: false,
        configurationReset: false,
        overall: false
    };
    
    // 1. Validar funciones de Auth
    console.log('1Ô∏è‚É£ Validando funciones de Auth...');
    if (typeof Auth === 'object' && 
        typeof Auth.clearUserState === 'function' &&
        typeof Auth.resetUIToDefault === 'function' &&
        typeof Auth.cleanupDynamicElements === 'function' &&
        typeof Auth.setupUserSpecificUI === 'function') {
        results.authFunctions = true;
        console.log('‚úÖ Funciones de Auth implementadas correctamente');
    } else {
        console.error('‚ùå Funciones de Auth faltantes o incorrectas');
    }
    
    // 2. Validar funciones de UI
    console.log('2Ô∏è‚É£ Validando funciones de UI...');
    if (typeof UI === 'object' && 
        typeof UI.resetUIToDefault === 'function' &&
        typeof UI.clearStoredConfigurations === 'function' &&
        typeof UI.initializeForUser === 'function' &&
        typeof UI.isValidColor === 'function') {
        results.uiFunctions = true;
        console.log('‚úÖ Funciones de UI implementadas correctamente');
    } else {
        console.error('‚ùå Funciones de UI faltantes o incorrectas');
    }
    
    // 3. Validar funciones de Permissions
    console.log('3Ô∏è‚É£ Validando funciones de Permissions...');
    if (typeof Permissions === 'object' && 
        typeof Permissions.cleanupPreviousRoleElements === 'function' &&
        typeof Permissions.applyRoleBasedConfiguration === 'function' &&
        typeof Permissions.validateCleanState === 'function') {
        results.permissionsFunctions = true;
        console.log('‚úÖ Funciones de Permissions implementadas correctamente');
    } else {
        console.error('‚ùå Funciones de Permissions faltantes o incorrectas');
    }
    
    // 4. Validar limpieza de DOM
    console.log('4Ô∏è‚É£ Validando limpieza de DOM...');
    const problematicElements = document.querySelectorAll('.admin-welcome, .asesor-welcome, [style*="background-color"]');
    if (problematicElements.length === 0) {
        results.domCleanup = true;
        console.log('‚úÖ DOM limpio sin elementos problem√°ticos');
    } else {
        console.warn(`‚ö†Ô∏è Encontrados ${problematicElements.length} elementos problem√°ticos en DOM`);
    }
    
    // 5. Validar configuraciones
    console.log('5Ô∏è‚É£ Validando configuraciones...');
    const hasCleanConfig = !localStorage.getItem(CONFIG.STORAGE_KEYS.THEME) || 
                          !localStorage.getItem(CONFIG.STORAGE_KEYS.PRIMARY_COLOR);
    if (hasCleanConfig) {
        results.configurationReset = true;
        console.log('‚úÖ Configuraciones reseteadas correctamente');
    } else {
        console.log('‚ÑπÔ∏è Configuraciones presentes (normal si hay usuario logueado)');
        results.configurationReset = true; // Aceptable si hay usuario
    }
    
    // Resultado general
    results.overall = Object.values(results).every(r => r === true);
    
    console.log('üß™ === RESULTADOS DE VALIDACI√ìN ===');
    console.table(results);
    
    if (results.overall) {
        console.log('üéâ ¬°VALIDACI√ìN EXITOSA! El fix est√° implementado correctamente.');
        showNotification('‚úÖ Fix de cache/estado validado exitosamente', 'success');
    } else {
        console.error('‚ùå VALIDACI√ìN FALLIDA. Revisar funciones faltantes.');
        showNotification('‚ùå Validaci√≥n del fix fall√≥. Revisar consola.', 'error');
    }
    
    return results;
};

// Exponer funci√≥n globalmente para pruebas
window.testCacheStateFix = function() {
    console.log('üî¨ === INICIANDO PRUEBA COMPLETA DEL FIX ===');
    
    // 1. Simular logout
    console.log('1Ô∏è‚É£ Simulando logout...');
    if (Auth.clearUserState) {
        Auth.clearUserState();
        console.log('‚úÖ clearUserState ejecutado');
    }
    
    // 2. Verificar limpieza
    setTimeout(() => {
        console.log('2Ô∏è‚É£ Verificando limpieza...');
        const cleanState = Permissions.validateCleanState ? Permissions.validateCleanState() : true;
        console.log(`üßπ Estado limpio: ${cleanState ? 'S√ç' : 'NO'}`);
        
        // 3. Simular configuraci√≥n para nuevo usuario
        console.log('3Ô∏è‚É£ Simulando configuraci√≥n para nuevo usuario...');
        const mockUser = { email: 'test@test.com', rol: 'admin' };
        if (UI.initializeForUser) {
            UI.initializeForUser(mockUser);
            console.log('‚úÖ initializeForUser ejecutado');
        }
        
        // 4. Resultado final
        console.log('üî¨ === PRUEBA COMPLETA FINALIZADA ===');
        return validateCacheStateFix();
    }, 500);
};

/**
 * ‚úÖ NUEVA FUNCI√ìN: Verificaci√≥n r√°pida de dependencias
 * AGREGAR a main.js
 */
window.verifyDependencies = function() {
    console.log('üîç === VERIFICACI√ìN DE DEPENDENCIAS ===');
    
    const dependencies = {
        CONFIG: typeof CONFIG !== 'undefined',
        Auth: typeof Auth !== 'undefined',
        UI: typeof UI !== 'undefined',
        Reclutas: typeof Reclutas !== 'undefined',
        Calendar: typeof Calendar !== 'undefined',
        Client: typeof Client !== 'undefined',
        Timeline: typeof Timeline !== 'undefined',
        Permissions: typeof Permissions !== 'undefined',
        showNotification: typeof showNotification !== 'undefined',
        showError: typeof showError !== 'undefined',
        showSuccess: typeof showSuccess !== 'undefined'
    };
    
    console.table(dependencies);
    
    const missing = Object.entries(dependencies)
        .filter(([key, available]) => !available)
        .map(([key]) => key);
    
    if (missing.length > 0) {
        console.error('‚ùå Dependencias faltantes:', missing);
        return false;
    } else {
        console.log('‚úÖ Todas las dependencias est√°n disponibles');
        return true;
    }
};

/**
 * ‚úÖ NUEVA FUNCI√ìN: Verificaci√≥n r√°pida del fix
 * AGREGAR a main.js
 */
window.quickHealthCheck = function() {
    console.log('‚ö° === VERIFICACI√ìN R√ÅPIDA DEL SISTEMA ===');
    
    // 1. Verificar dependencias
    const depsOk = verifyDependencies();
    
    // 2. Verificar funciones cr√≠ticas de UI
    const uiFunctionsOk = typeof UI === 'object' && 
                         typeof UI.loadSavedTheme === 'function' &&
                         typeof UI.resetUIToDefault === 'function';
    
    // 3. Verificar que no hay elementos problem√°ticos
    const problematicElements = document.querySelectorAll('.admin-welcome, .asesor-welcome');
    const domClean = problematicElements.length === 0;
    
    // 4. Verificar configuraciones b√°sicas
    const hasBasicConfig = typeof CONFIG !== 'undefined' && CONFIG.DEFAULTS;
    
    const results = {
        dependencies: depsOk,
        uiFunctions: uiFunctionsOk,
        domClean: domClean,
        basicConfig: hasBasicConfig,
        overall: depsOk && uiFunctionsOk && domClean && hasBasicConfig
    };
    
    console.table(results);
    
    if (results.overall) {
        console.log('üéâ ¬°Sistema funcionando correctamente!');
        if (typeof showNotification !== 'undefined') {
            showNotification('‚úÖ Sistema verificado correctamente', 'success');
        }
    } else {
        console.error('‚ùå Sistema tiene problemas. Ver detalles arriba.');
        if (typeof showError !== 'undefined') {
            showError('‚ùå Sistema tiene problemas. Revisar consola.');
        }
    }
    
    return results.overall;
};

// üÜï EXPORTAR FUNCIONES PARA USO GLOBAL
window.loadEstadisticas = loadEstadisticas;
window.loadMetricasAdminModule = loadMetricasAdminModule;
window.initializeMetricasAdmin = initializeMetricasAdmin;

console.log('üîß Integraci√≥n de m√©tricas administrativas completada');

// ‚úÖ EXPONER FUNCIONES PARA DEBUGGING
window.initializeAuthAndUI = initializeAuthAndUI;